# 导入哈希加密模块，用于对密码进行加密处理
import hashlib

# 初始化用户数据库（字典结构）
# 键：用户名；值：通过MD5加密后的密码对象（初始用户的密码已提前加密）
all_web = {
    "小甲鱼": hashlib.md5(b"I_love_FishC"),  # 加密"小甲鱼"的密码
    "不二如是": hashlib.md5(b"FishC5201314")  # 加密"不二如是"的密码
}

# 获取用户输入的注册用户名
name = input("请输入注册的用户名")

# 循环检查用户名是否已被注册
while True:
    # 如果用户名已存在于数据库中
    if name in all_web:
        print("该用户已经被注册,请重试")  # 提示用户
        name = input("请输入注册的用户名")  # 重新获取用户名
    else:
        break  # 用户名可用，退出循环

# 获取用户输入的密码（明文）
word = input("请输入密码")

# 将明文密码转换为字节类型（因为MD5加密需要字节流作为输入）
# bytes()方法指定编码为utf-8，确保中文等字符能正确转换
sst = bytes(word, "utf-8")

# 使用MD5算法对字节类型的密码进行加密，得到加密对象
word = hashlib.md5(sst)

# 将新用户的用户名和加密后的密码存入数据库
all_web[name] = word

# 打印所有注册成功的用户信息
print("注册成功的用户有:")

# 遍历数据库中的所有键值对（items()方法返回(用户名, 加密密码对象)元组）
for i in all_web.items():
    # 打印用户名（i[0]）和加密密码的十六进制字符串（i[1].hexdigest()）
    # hexdigest()方法将加密对象转换为人类可阅读的32位十六进制字符串
    print(i[0], i[1].hexdigest())
